
environment:
  EXE_BRANCH: "master"

  matrix:

    # For Python versions available on Appveyor, see
    # https://www.appveyor.com/docs/windows-images-software/#python
    # The list here is complete (excluding Python 2.6, which
    # isn't covered by this document) at the time of writing. 
    
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    
    - APPVEYOR_BUILD_WORKER_IMAGE: ubuntu2004
      
    - APPVEYOR_BUILD_WORKER_IMAGE: macos

for: 

  -
    matrix:
      only:
        - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
        
    install:
      # We need wheel installed to build wheels
      - ps: >-
            $Env:LLVM_DIR="C:\Program Files\LLVM\bin"
            
            $PYVERSION = @("C:\\Python36-x64","C:\\Python37-x64","C:\\Python38-x64")
            
            foreach ($PY in $PYVERSION)
            {
                & "$PY\\python.exe" -m pip install --upgrade pip --no-warn-script-location
                & "$PY\\python.exe" -m pip install --upgrade setuptools --no-warn-script-location
                & "$PY\\python.exe" -m pip install wheel --no-warn-script-location
                & "$PY\\python.exe" -m pip install numpy --no-warn-script-location
                
                & "$PY\\python.exe" -m pip install -r pip_requirements_tests.txt --no-warn-script-location
                & "$PY\\python.exe" -m pip install h5py --no-warn-script-location
                & "$PY\\python.exe" -m pip install pylzma PyQt5 xlrd xlwt pyaml xlsxwriter scipy hdf5storage fastparquet cChardet==2.1.5 psutil pyinstaller pyqtgraph --no-warn-script-location
                & "$PY\\python.exe" -m pip install . --no-warn-script-location
                
                echo "$Env:APPVEYOR_REPO_BRANCH $Env:EXE_BRANCH $PY"
                
                if (($Env:APPVEYOR_REPO_BRANCH -eq $Env:EXE_BRANCH) -and ($PY -eq "C:\\Python37-x64")) {
                    & "$PY\\Scripts\\pyinstaller" asammdf_noconsole.spec
                    $src = "dist\\asammdfgui.exe"
                    $dst = "dist\\asammdfgui_noconsole.exe"
                    Move-Item -Path $src -Destination $dst
                    
                    & "$PY\\Scripts\\pyinstaller" asammdf.spec
                }

            }   
      
    build : off
    
    test_script:
      # Put your test command here.
      # If you don't need to build C extensions on 64-bit Python 3.3 or 3.4,
      # you can remove "build.cmd" from the front of the command, as it's
      # only needed to support those cases.
      # Note that you must use the environment variable %PYTHON% to refer to
      # the interpreter you're using - Appveyor does not do anything special
      # to put the Python version you want to use on PATH.
      - ps: >-
            $PYVERSION = @("C:\\Python36-x64","C:\\Python37-x64","C:\\Python38-x64")
            
            foreach ($PY in $PYVERSION)
            {
                & "$PY\\python.exe" test/run_all.py
            }
      
    after_test:
      # This step builds your wheels.
      # Again, you only need build.cmd if you're building C extensions for
      # 64-bit Python 3.3/3.4. And you need to use %PYTHON% to get the correct
      # interpreter
      - ps: >-
            $PYVERSION = @("C:\\Python36-x64","C:\\Python37-x64","C:\\Python38-x64")
            
            foreach ($PY in $PYVERSION)
            {
                & "$PY\\python.exe" setup.py bdist_wheel
            }
      
    artifacts:
      # bdist_wheel puts your built wheel in the dist directory
      - path: dist\*
      
  -
    matrix:
      only:
        - APPVEYOR_BUILD_WORKER_IMAGE: ubuntu2004
        
    install:
      - sh: >-
          for PY in venv3.6 venv3.7 venv3.8
              do
                  source $HOME/$PY/bin/activate
                  
                  pip3 install --upgrade pip
                  pip3 install --upgrade setuptools
                  pip3 install wheel
                  pip3 install numpy
                  pip3 install -r pip_requirements_tests.txt
                  pip3 install pylzma PyQt5 h5py xlrd xlwt pyaml xlsxwriter scipy hdf5storage fastparquet cChardet==2.1.5 psutil pyinstaller pyqtgraph
                  pip3 install .
                  
                  if [[ $APPVEYOR_REPO_BRANCH == $EXE_BRANCH && $PY == "venv3.7" ]] ; then
                     pyinstaller asammdf_noconsole.spec
                  fi
                  
                  deactivate
              done

    #build: Script
    
    test_script:
      # Put your test command here.
      # If you don't need to build C extensions on 64-bit Python 3.3 or 3.4,
      # you can remove "build.cmd" from the front of the command, as it's
      # only needed to support those cases.
      # Note that you must use the environment variable %PYTHON% to refer to
      # the interpreter you're using - Appveyor does not do anything special
      # to put the Python version you want to use on PATH.
      - sh: >-
          for PY in venv3.6 venv3.7 venv3.8
              do
                  source $HOME/$PY/bin/activate
                  python3 test/run_all.py
                  deactivate
              done
      
    after_test:
      # This step builds your wheels.
      # Again, you only need build.cmd if you're building C extensions for
      # 64-bit Python 3.3/3.4. And you need to use %PYTHON% to get the correct
      # interpreter
      - sh: >-
          for PY in venv3.6 venv3.7 venv3.8
              do
                  source $HOME/$PY/bin/activate
                  python3 setup.py bdist_wheel
                  deactivate
              done
      
    artifacts:
      # bdist_wheel puts your built wheel in the dist directory
      - path: dist\*
      
  -
    matrix:
      only:
        - APPVEYOR_BUILD_WORKER_IMAGE: macos

    install:
      # We need wheel installed to build wheels
      - sh: >-
          for PY in venv3.6 venv3.7 venv3.8
              do
                  source ~/$PY/bin/activate
                  
                  pip3 install --upgrade pip
                  pip3 install --upgrade setuptools
                  pip3 install wheel
                  pip3 install numpy
                  pip3 install -r pip_requirements_tests.txt
                  pip3 install pylzma PyQt5 h5py xlrd xlwt pyaml xlsxwriter scipy hdf5storage fastparquet cChardet==2.1.5 psutil pyinstaller pyqtgraph
                  pip3 install .
                  
                  if [[ $APPVEYOR_REPO_BRANCH == $EXE_BRANCH && $PY == "venv3.7" ]] ; then
                     pyinstaller asammdf_noconsole.spec
                  fi
                  
                  deactivate
              done
      
    # build: off
    
    test_script:
      # Put your test command here.
      # If you don't need to build C extensions on 64-bit Python 3.3 or 3.4,
      # you can remove "build.cmd" from the front of the command, as it's
      # only needed to support those cases.
      # Note that you must use the environment variable %PYTHON% to refer to
      # the interpreter you're using - Appveyor does not do anything special
      # to put the Python version you want to use on PATH.
      - sh: >-
          for PY in venv3.6 venv3.7 venv3.8
              do
                  source ~/$PY/bin/activate
                  python3 test/run_all.py
                  deactivate
              done
      
    after_test:
      # This step builds your wheels.
      # Again, you only need build.cmd if you're building C extensions for
      # 64-bit Python 3.3/3.4. And you need to use %PYTHON% to get the correct
      # interpreter
      - sh: >-
          for PY in venv3.6 venv3.7 venv3.8
              do
                  source ~/$PY/bin/activate
                  python3 setup.py bdist_wheel
                  deactivate
              done
      
    artifacts:
      # bdist_wheel puts your built wheel in the dist directory
      - path: dist\*

  




